# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'screen_keyload.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
#index(8)

from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_screen_keyload(object):
    def setupUi(self, screen_keyload,iot_handler):
        if self.iot_handler:
            self.cursor = self.iot_handler.cursor
            self.conn = self.iot_handler.conn
        screen_keyload.setObjectName("screen_keyload")
        screen_keyload.resize(720, 1280)
        screen_keyload.setWindowFlags(QtCore.Qt.FramelessWindowHint)  # Remove title bar
        screen_keyload.setLocale(QtCore.QLocale(QtCore.QLocale.English, QtCore.QLocale.Australia))
        self.centralwidget = QtWidgets.QWidget(screen_keyload)
        self.centralwidget.setObjectName("centralwidget")
        self.lblhotel = QtWidgets.QLabel(self.centralwidget)
        self.lblhotel.setGeometry(QtCore.QRect(210, 40, 300, 115))
        self.lblhotel.setObjectName("lblhotel")
        self.lblskc = QtWidgets.QLabel(self.centralwidget)
        self.lblskc.setGeometry(QtCore.QRect(240, 1040, 240, 114))
        self.lblskc.setObjectName("lblskc")
        self.btn_goback = QtWidgets.QPushButton(self.centralwidget)
        self.btn_goback.setGeometry(QtCore.QRect(290, 1165, 140, 100))
        font = QtGui.QFont()
        font.setFamily("Maiandra GD")
        font.setPointSize(12)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.btn_goback.setFont(font)
        self.btn_goback.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.btn_goback.setStyleSheet("background-color: #f24962; border-radius: 15px;")
        self.btn_goback.setObjectName("btn_goback")
        self.lbl_message = QtWidgets.QLabel(self.centralwidget)
        self.lbl_message.setGeometry(QtCore.QRect(180, 230, 391, 60))
        font = QtGui.QFont()
        font.setFamily("Maiandra GD")
        font.setPointSize(32)
        self.lbl_message.setFont(font)
        self.lbl_message.setObjectName("lbl_message")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(-10, -10, 740, 1300))
        font = QtGui.QFont()
        font.setFamily("Maiandra GD")
        font.setBold(True)
        font.setWeight(75)
        self.frame.setFont(font)
        self.frame.setStyleSheet("border: 15px solid black;  border-radius: 35px;")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.txt_qr = QtWidgets.QTextEdit(self.centralwidget)
        self.txt_qr.setGeometry(QtCore.QRect(130, 360, 371, 81))
        self.txt_qr.setObjectName("txt_qr")
        self.btn_qrok = QtWidgets.QPushButton(self.centralwidget)
        self.btn_qrok.setGeometry(QtCore.QRect(260, 470, 140, 100))
        font = QtGui.QFont()
        font.setFamily("Maiandra GD")
        font.setPointSize(12)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.btn_qrok.setFont(font)
        self.btn_qrok.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.btn_qrok.setStyleSheet("background-color: #f24962; border-radius: 15px;")
        self.btn_qrok.setObjectName("btn_qrok")
        self.frame.raise_()
        self.lblskc.raise_()
        self.btn_goback.raise_()
        self.lblhotel.raise_()
        self.lbl_message.raise_()
        self.txt_qr.raise_()
        self.btn_qrok.raise_()
        screen_keyload.setCentralWidget(self.centralwidget)

        self.retranslateUi(screen_keyload)
        QtCore.QMetaObject.connectSlotsByName(screen_keyload)

        self.btn_goback.clicked.connect(self.load_main)
        self.btn_qrok.clicked.connect(self.checktag)


    def retranslateUi(self, screen_keyload):
        _translate = QtCore.QCoreApplication.translate
        screen_keyload.setWindowTitle(_translate("screen_keyload", "MainWindow"))
        self.lblhotel.setText(_translate("screen_keyload", "<html><head/><body><p><img src=\":/Cllix logo/cllix-logo_300-115.png\"/></p></body></html>"))
        self.lblskc.setText(_translate("screen_keyload", "<html><head/><body><p><img src=\":/SKCLogo/SKC_240-114.jpg\"/></p></body></html>"))
        self.btn_goback.setText(_translate("screen_keyload", "Go back"))
        self.lbl_message.setText(_translate("screen_keyload", "Scan key fob"))
        self.btn_qrok.setText(_translate("screen_keyload", "OK"))

    def load_main(self):
        self.parent().setCurrentIndex(7)

    def checktag(self):
        qrcode = self.txt_qr.toPlainText()
        out1 = self.check_db(qrcode)
        out2 = self.open_bin(out1,qrcode)
        print(out2)

    def open_bin(self,bin_no,qr_code):
#       open bin
        try:
            update_query = """UPDATE smartkeycaddyuser.Keyallocation SET "status" = 1 WHERE "keyfobtag" = %s RETURNING "keyallocationid";"""
            self.cursor.execute(update_query,(qr_code,))
#            keyallocationid = self.cursor.fetchall()
            keyallocationid = self.cursor.fetchone()
            self.conn.commit()
            insert_query = """INSERT INTO smartkeycaddyuser.keytransaction ("keyallocationid","keytransactiontype") values (%s,%s);"""
            val = (keyallocationid, "KeyLoad")
            self.cursor.execute(insert_query,val)
            self.conn.commit()
            db_output = "ok"
        except Exception as e:
            db_output = (f"DB operation failed: {e}")
        return db_output        


    def check_db(self,qr_code):
        print(qr_code)
        db_output = []
        try:
            select_query = """select b.binid, b.binnumber
                                from smartkeycaddyuser.keyallocation k 
	                            inner join smartkeycaddyuser.keyfobtag f
                                on k.keyfobtagid = f.keyfobtagid
	                            inner join smartkeycaddyuser.bin b 
                                on k.binid = b.binid
                                where k.status = 'KeyAllocated'
                                and f.keyfobtag = %s;"""
            print(select_query)
            self.cursor.execute(select_query, (qr_code,))
            db_output = self.cursor.fetchall()
            print(db_output)
        except Exception as e:
            db_output = (f"DB operation failed: {e}")
        return db_output

"""select b.binid, b.binnumber
from smartkeycaddyuser.keyallocation k 
	inner join smartkeycaddyuser.keyfobtag f
on k.keyfobtagid = f.keyfobtagid
	inner join smartkeycaddyuser.bin b 
on k.binid = b.binid
where k.status = 'KeyAllocated'
and f.keyfobtag = %s;"""

import screens.SKC_rc


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    screen_keyload = QtWidgets.QMainWindow()
    ui = Ui_screen_keyload()
    ui.setupUi(screen_keyload)
    screen_keyload.show()
    sys.exit(app.exec_())
